<?php

/**
 * @file
 * The Social landing page module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\node\NodeInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Url;

/**
 * Implements hook_form_alter().
 */
function social_landing_page_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if (in_array($form_id, [
    'node_landing_page_edit_form',
    'node_landing_page_form',
  ])) {
    $form['#attached']['library'][] = 'social_landing_page/admin';
  }
}

/**
 * Implements hook_form_form_ID_alter().
 *
 * Remove Landing Page option from Search Content filter.
 */
function social_landing_page_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form['#id'] === 'views-exposed-form-search-content-page') {
    if (isset($form['type']['#options']['landing_page'])) {
      unset($form['type']['#options']['landing_page']);
    }
  }
}

/**
 * Implements hook_theme().
 */
function social_landing_page_theme() {
  // Page.
  $theme_templates['page__node__landing_page'] = [
    'base hook' => 'page',
  ];
  // Node.
  $theme_templates['node__landing_page'] = [
    'base hook' => 'node',
  ];
  $theme_templates['node__featured'] = [
    'base hook' => 'node',
  ];
  $theme_templates['node__event__featured'] = [
    'base hook' => 'node',
  ];
  $theme_templates['node__topic__featured'] = [
    'base hook' => 'node',
  ];
  $theme_templates['node__page__featured'] = [
    'base hook' => 'node',
  ];
  $theme_templates['node__book__featured'] = [
    'base hook' => 'node',
  ];
  $theme_templates['node__landing_page__featured'] = [
    'base hook' => 'node',
  ];
  // Group.
  $theme_templates['group__featured'] = [
    'base hook' => 'group',
  ];
  // Profile.
  $theme_templates['profile__featured'] = [
    'base hook' => 'profile',
  ];
  // Paragraphs.
  $theme_templates['paragraph__block__default'] = [
    'base hook' => 'paragraph',
  ];
  $theme_templates['paragraph__button__default'] = [
    'base hook' => 'paragraph',
  ];
  $theme_templates['paragraph__featured__default'] = [
    'base hook' => 'paragraph',
  ];
  $theme_templates['paragraph__featured_item__default'] = [
    'base hook' => 'paragraph',
  ];
  $theme_templates['paragraph__featured_items__default'] = [
    'base hook' => 'paragraph',
  ];
  $theme_templates['paragraph__hero__default'] = [
    'base hook' => 'paragraph',
  ];
  $theme_templates['paragraph__hero_small__default'] = [
    'base hook' => 'paragraph',
  ];
  $theme_templates['paragraph__introduction__default'] = [
    'base hook' => 'paragraph',
  ];
  $theme_templates['paragraph__section__default'] = [
    'base hook' => 'paragraph',
  ];
  $theme_templates['paragraph__accordion__default'] = [
    'base hook' => 'paragraph',
  ];
  $theme_templates['paragraph__accordion_item__default'] = [
    'base hook' => 'paragraph',
  ];
  // Fields.
  $theme_templates['field__paragraph__section'] = [
    'base hook' => 'field',
  ];
  // Fields for feature item.
  $theme_templates['field__paragraph__field_featured_items'] = [
    'base hook' => 'field',
  ];
  // Fields for hero buttons.
  $theme_templates['field__paragraph__field_hero_buttons'] = [
    'base hook' => 'field',
  ];
  $theme_templates['field__paragraph__field_hero_small_buttons'] = [
    'base hook' => 'field',
  ];
  // Views.
  $theme_templates['views_view__community_activities'] = [
    'base hook' => 'views_view',
  ];

  return $theme_templates;
}

/**
 * Implements hook_preprocess_page().
 */
function social_landing_page_preprocess_page(&$variables) {
  // Here we remove class for landing page.
  if (isset($variables['node']) && $variables['node']->bundle() === 'landing_page') {
    if ($variables['content_attributes'] instanceof Attribute) {
      $variables['content_attributes']->removeClass('layout--with-complementary');
    }
    else {
      $variables['content_attributes'] = new Attribute();
      $variables['content_attributes']->addClass('container');
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function social_landing_page_node_presave(NodeInterface $node) {
  if ($node->bundle() === 'landing_page') {
    social_landing_page_set_hero_image($node);
  }
}

/**
 * Updates the hero image for the landing page based on paragraph sections.
 *
 * Some displays, such as the featured view mode, require an image to be used in
 * teasers. Landing pages don't allow this image to be specified on the form but
 * instead use the image of the first hero section. This function will find the
 * first hero image and set it as a teaser image.
 *
 * This will overwrite any values that were previously set in the
 * field_landing_page_image field as there is no way to distinguish between a
 * value for this field that was deliberately set (e.g. through an API call) or
 * set by a previous call to this function.
 *
 * @param \Drupal\node\NodeInterface $landing_page
 *   A landing page node to be altered.
 */
function social_landing_page_set_hero_image(NodeInterface $landing_page) {
  // Shorthand some conditions so they can be easily re-used.
  $is_updating = isset($landing_page->original);
  $has_image = !$landing_page->get('field_landing_page_image')->isEmpty();

  // Check if the sections have changed.
  // This expression can not be simplified because $landing_page->original is
  // undefined if $is_updating is false. Paragraphs have always changed if this
  // is a new entity (not updating).
  $paragraphs_changed = !$is_updating || ($is_updating && !$landing_page->get('field_landing_page_section')->equals($landing_page->original->get('field_landing_page_section')));

  // If there is already an image set and the paragraphs haven't changed then we
  // do nothing.
  if ($has_image && !$paragraphs_changed) {
    return;
  }

  // Find the first hero paragraph in the section paragraphs that has an image.
  /** @var \Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem $section */
  foreach ($landing_page->get('field_landing_page_section') as $section) {
    /** @var \Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList $section_children */
    $section_children = $section->entity->get('field_section_paragraph');

    // Skip accidentally empty sections.
    // Each section only holds one paragraph in Open Social but the field type
    // could have more.
    if ($section_children->isEmpty()) {
      continue;
    }
    /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
    $paragraph = $section_children->first()->entity;

    // Check if this paragraph has the hero small image field we can use.
    if ($paragraph->hasField('field_hero_small_image') && !$paragraph->get('field_hero_small_image')->isEmpty()) {
      $landing_page->set('field_landing_page_image', $paragraph->get('field_hero_small_image')->getValue());
      break;
    }

    // Check if this paragraph has the normal hero field we can use.
    if ($paragraph->hasField('field_hero_image') && !$paragraph->get('field_hero_image')->isEmpty()) {
      $landing_page->set('field_landing_page_image', $paragraph->get('field_hero_image')->getValue());
      break;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function social_landing_page_preprocess_node(&$variables) {
  /** @var \Drupal\node\Entity\Node $node */
  $node = $variables['node'];
  // Landing page nodes need a specially positioned edit icon.
  // Only existing nodes can be edited. Nodes in preview mode aren't editable.
  if ($node->getType() === 'landing_page' && $node->id() !== NULL) {
    // TODO #3096639: Replace node_edit_url with content.links.edit.
    $variables['node_edit_url'] = [
      '#type' => 'link',
      '#title' => [
        '#markup' => '<svg class="icon-gray icon-medium"><use xlink:href="#icon-edit"></use></svg>',
        '#allowed_tags' => ['use', 'svg'],
      ],
      '#options' => [
        'attributes' => [
          'title' => new TranslatableMarkup('Edit content'),
          'class' => 'waves-effect waves-light btn btn-raised btn-default btn-floating',
        ],
      ],
    ] + $node->toUrl('edit-form')->toRenderArray();
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function social_landing_page_preprocess_field(&$variables) {
  if ($variables['field_name'] === 'field_button_link_an' || $variables['field_name'] === 'field_button_link_lu') {
    $entity = $variables['element']['#object'];
    $button_style = $entity->field_button_style->value;
    foreach ($variables['items'] as $key => $value) {
      if (isset($variables['items'][$key]['content'])) {
        $variables['items'][$key]['content']['#options']['attributes'] = [
          'class' => 'btn btn-lg ' . $button_style,
        ];
      }
    }
  }
}

/**
 * Implements hook_social_user_account_header_create_links().
 *
 * Adds the "Create Landing Page" link to the content creation menu.
 */
function social_landing_page_social_user_account_header_create_links($context) {
  return [
    'add_landing_page' => [
      '#type' => 'link',
      '#attributes' => [
        'title' => new TranslatableMarkup('Create New Landing Page'),
      ],
      '#title' => new TranslatableMarkup('New Landing Page'),
      '#weight' => 400,
    ] + Url::fromRoute('node.add', ['node_type' => 'landing_page'])->toRenderArray(),
  ];
}
